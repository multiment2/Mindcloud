/**
 * Minified by jsDelivr using UglifyJS v3.1.10.
 * Original file: /npm/json-rpc-client@0.2.2/lib/jsonrpc.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var util=require("util"),events=require("events"),net=require("net"),jsonrpc_client=function(e){function n(){a._client.setEncoding("utf8"),a._client.on("data",function(e){c+=e.trim();for(var n;-1!==(n=c.indexOf("}",n+1));){var t=c.substring(c,n+1);try{var i=JSON.parse(t);if(c=c.substring(n+1).trim(),n=0,!i.id)return a.emit("error","message has no id");if("function"!=typeof o[i.id])return a.emit("error","invalid callback for message: "+i.id);o[i.id](i),o[i.id]=null}catch(e){}}}),a._client.on("error",function(e){l=!1,console.log("error:"+e),a.emit("error",e)}),a._client.on("close",function(e){function i(){a.emit("reconnect"),s=0,l=!0,t.keepalive&&(a._client.setKeepAlive(!0,1e3),a._keepalive.setKeepAliveInterval(a._client,1e3),a._keepalive.setKeepAliveProbes(a._client,1))}return l=!1,console.log("closing:"+t.reconnect),t.reconnect?t.reconnect_count&&s++>t.reconnect_count?a.emit("close","tcp reconnect tries exceded"):(a._client=new net.Socket({fd:a._client.fd}),void 0!==t.path?(console.log("connecting path"),setTimeout(function(){n(),a._client.connect(t.path,i)},t.reconnect_interval)):(console.log("connecting host/port"),setTimeout(function(){n(),a._client.connect(t.port,t.host,i)},t.reconnect_interval))):r?a.emit("close",e):void 0})}console.log(e);var t=e||{};void 0===t.path&&(void 0===t.host&&(t.host="127.0.0.1"),void 0===t.port&&(t.port=5080)),void 0===t.reconnect&&(t.reconnect=!0),void 0===t.reconnect_count&&(t.reconnect_count=0),void 0===t.reconnect_interval&&(t.reconnect_interval=1e3);var i=1,o=[],c="",r=!1,l=!1,s=0,a=this;this.send=function(e,n,t){return new Promise(function(c,r){if(!l){var s={code:32100,message:"connection is not valid"};return r(s),void a.emit("error",s)}var v={jsonrpc:"2.0",method:e};n&&(v.params=n),t?(a._client.write(JSON.stringify(v)),c()):(v.id=i,o[i++]=c,a._client.write(JSON.stringify(v)))})},this.close=function(){return t.reconnect=!1,new Promise(function(e){a._client.end(e)})},this.connect=function(){return new Promise(function(e,i){a._client=net.connect(t,function(){if(r=!0,l=!0,t.keepalive){try{a._keepalive=require("net-keepalive")}catch(e){if(console.log(e),"MODULE_NOT_FOUND"===e.code)throw new Error("Please install net-keepalive manually (optional dependency)")}a._client.setKeepAlive(!0,1e3),a._keepalive.setKeepAliveInterval(a._client,1e3),a._keepalive.setKeepAliveProbes(a._client,1)}n(),e()}),a._client.once("error",function(e){l=!1,console.log("error:"+e),r||i(e)})})}};util.inherits(jsonrpc_client,events.EventEmitter),module.exports=jsonrpc_client;
//# sourceMappingURL=/sm/52a26531c60ab725d7d35a324078f577647d4a259d0a9667359dc65b7aa2298f.map
